-------------------------------------------------------------------------
-- File Name	: DataMigration_IG_RoleGrant.sql
-- Date			: 05-March-2020
-- Version		: 0.2
-- Description	: Grant Script for Data Migration IG Core DB
-------------------------------------------------------------------------
-------------------------------- Change Log -----------------------------
-- Date			Description
-- 2020-06-05	
-------------------------------------------------------------------------
SET SERVEROUTPUT ON;

-- Drop Role & DB Link if it exists
DECLARE
	cnt NUMBER(2,1):=0;
	v_code  NUMBER;
	v_errm  VARCHAR2(64);
    instance_name VARCHAR2(30);
BEGIN
    DBMS_OUTPUT.PUT_LINE('Data Migration: Role Grant Begins');
	-- Drop Role
	SELECT COUNT(1) INTO cnt FROM DBA_ROLES WHERE ROLE='IG_DATA_MIGRATION_ROLE';
	
	IF (cnt > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Found IG_DATA_MIGRATION_ROLE Role. Proceeding with Drop of IG_DATA_MIGRATION_ROLE.');
		EXECUTE IMMEDIATE ('DROP ROLE IG_DATA_MIGRATION_ROLE');
        DBMS_OUTPUT.PUT_LINE('IG_DATA_MIGRATION_ROLE Role Dropped.');
	END IF;
	
	-- Drop DB Link
	SELECT COUNT(1) INTO cnt FROM ALL_DB_LINKS WHERE DB_LINK='DMSTAGEDBLINK' AND OWNER='PUBLIC';
	
	IF (cnt > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Found Proxy DB Link - DMSTAGEDBLINK. Proceeding with Drop of DMSTAGEDBLINK.');
		EXECUTE IMMEDIATE ('DROP PUBLIC DATABASE LINK DMSTAGEDBLINK');
        DBMS_OUTPUT.PUT_LINE('DMSTAGEDBLINK DB Link Dropped.');
	END IF;
	
	-- Grant Create Role for Data Migration
	EXECUTE IMMEDIATE('create role IG_DATA_MIGRATION_ROLE');
	
	-- Grant 
	EXECUTE IMMEDIATE('grant CONNECT, CREATE SESSION, RESOURCE TO IG_DATA_MIGRATION_ROLE');
	-- Grant Procedure
	EXECUTE IMMEDIATE('grant CREATE ANY PROCEDURE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant EXECUTE ANY PROCEDURE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant ALTER ANY PROCEDURE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant DROP ANY PROCEDURE TO IG_DATA_MIGRATION_ROLE');
	
	-- Grant Table
	EXECUTE IMMEDIATE('grant CREATE ANY TABLE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant INSERT ANY TABLE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant UPDATE ANY TABLE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant SELECT ANY TABLE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant ALTER ANY TABLE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant DROP ANY TABLE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant DELETE ANY TABLE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant COMMENT ANY TABLE TO IG_DATA_MIGRATION_ROLE');
	
	-- Grant Sequence
	EXECUTE IMMEDIATE('grant SELECT ANY SEQUENCE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant ALTER ANY SEQUENCE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant DROP ANY SEQUENCE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant CREATE ANY SEQUENCE TO IG_DATA_MIGRATION_ROLE');
	
	-- Grant Index
	EXECUTE IMMEDIATE('grant CREATE ANY INDEX TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant ALTER ANY INDEX TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant DROP ANY INDEX TO IG_DATA_MIGRATION_ROLE');
	
	-- Grant View
	EXECUTE IMMEDIATE('grant CREATE ANY VIEW TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant DROP ANY VIEW TO IG_DATA_MIGRATION_ROLE');
	
	--Trigger
	EXECUTE IMMEDIATE('grant CREATE ANY TRIGGER TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant ALTER ANY TRIGGER TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant DROP ANY TRIGGER TO IG_DATA_MIGRATION_ROLE');
	
	-- Grant Dictionary
	EXECUTE IMMEDIATE('grant SELECT ANY DICTIONARY TO IG_DATA_MIGRATION_ROLE');
	
	-- Grant Debug
	EXECUTE IMMEDIATE('grant DEBUG ANY PROCEDURE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant DEBUG CONNECT SESSION TO IG_DATA_MIGRATION_ROLE');
	
	-- Grant Context
	EXECUTE IMMEDIATE('grant CREATE ANY CONTEXT TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('grant DROP ANY CONTEXT TO IG_DATA_MIGRATION_ROLE');
	
	-- Grant Job
	EXECUTE IMMEDIATE('grant CREATE ANY JOB TO IG_DATA_MIGRATION_ROLE');
	
	-- Test
	--EXECUTE IMMEDIATE('grant EXECUTE ANY PROGRAM TO IG_DATA_MIGRATION_ROLE');
	--EXECUTE IMMEDIATE('grant MANAGE SCHEDULER TO IG_DATA_MIGRATION_ROLE');
	--EXECUTE IMMEDIATE('grant EXECUTE ANY CLASS TO IG_DATA_MIGRATION_ROLE');
	--EXECUTE IMMEDIATE('grant CREATE ANY CLUSTER TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('GRANT READ ANY TABLE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('GRANT USE ANY JOB RESOURCE TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('GRANT ALTER SESSION TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('GRANT ANALYZE ANY TO IG_DATA_MIGRATION_ROLE');
	EXECUTE IMMEDIATE('GRANT AUDIT ANY TO IG_DATA_MIGRATION_ROLE');

	EXECUTE IMMEDIATE('GRANT UNLIMITED TABLESPACE TO IG_DATA_MIGRATION_ROLE');
		
    DBMS_OUTPUT.PUT_LINE('Data Migration: Role Grant Ends');
    DBMS_OUTPUT.PUT_LINE('Data Migration: DB Link section Begins');
    
	-- Get IG Core DB Name
	SELECT SYS_CONTEXT('USERENV','DB_NAME') INTO instance_name FROM DUAL;
	DBMS_OUTPUT.PUT_LINE('Instance Name is:'||instance_name);
	
	IF (SUBSTR(instance_name, 1, 2) = 'ig') THEN
		DBMS_OUTPUT.PUT_LINE('This is IG Core DB, hence creating DMSTAGEDBLINK DB link');
		-- Proxy DB Link from IG Core DB to IG Staging DB
		EXECUTE IMMEDIATE('CREATE PUBLIC DATABASE LINK DMSTAGEDBLINK USING ''stgptx11''');
        DBMS_OUTPUT.PUT_LINE('Proxy DB Link - DMSTAGEDBLINK Created.');
	ELSIF (SUBSTR(instance_name, 1, 3) = 'stg') THEN
		DBMS_OUTPUT.PUT_LINE('This is IG Staging DB, hence skipping DB link creation');
	ELSE
		DBMS_OUTPUT.PUT_LINE('Unable to determine DB type, hence skipping DB link creation');
	END IF;
    
    DBMS_OUTPUT.PUT_LINE('Data Migration: DB Link section Ends');
		
	EXCEPTION
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('Error while executing block');
			v_code := SQLCODE;
			v_errm := SUBSTR(SQLERRM, 1, 64);
			DBMS_OUTPUT.PUT_LINE ('Error Code was:'||v_code || ' ' || v_errm);
		RETURN;
END;
/
